(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.11.1
var AnnotationDisplay, createTree, doc, entities,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

doc = {
  "text": "@B_brewer2 was gonna be early like 9ish cuz he didn't wanna stay out late and I have a doc apt tomorrow. But we'll callB B_brewer2 Peoples champion. #CMU Instagram @b_brewer2 Mount Pleasant / Dirty Mitten \n\n",
  "entities": {
    "Mentions:name": [
      {
        "indices": [119, 120],
        "annotationID": 2,
        "org_lookup_count": 0,
        "disclaimer_count": 0,
        "first_plural_count": 0,
        "first_singular_count": 0,
        "loc_lookup_count": 0,
        "occ_lookup_count": 0,
        "official_count": 0,
        "per_lookup_count": 0,
        "preposition_place_count": 0,
        "token_count": 1,
        "url_count": 0
      }
    ],
    "Mentions:screen_name": [
      {
        "indices": [121, 130],
        "annotationID": 3
      }
    ],
    "Mentions:description": [
      {
        "indices": [131, 174],
        "annotationID": 4,
        "org_count": 0,
        "first_singular_count": 0,
        "org_lookup_count": 0,
        "occ_lookup_count": 0,
        "disclaimer_count": 0,
        "occupation_count": 1,
        "preposition_place_count": 0,
        "loc_count": 0,
        "loc_lookup_count": 0,
        "url_count": 0,
        "per_count": 0,
        "official_count": 0,
        "token_count": 5,
        "per_lookup_count": 0,
        "first_plural_count": 0
      }
    ],
    "Mentions:location": [
      {
        "indices": [175, 204],
        "annotationID": 5
      }
    ],
    "Mentions:UserID": [
      {
        "indices": [119, 204],
        "annotationID": 6,
        "max-bncorg-score": 0.8086047,
        "max-org-score": 0.8086047,
        "mean-bncorg-score": 0.09787908,
        "disclaimer_count": 0,
        "max-loc-score": 0.0,
        "sum-bncorg-score": 1.5660653,
        "user": "B_brewer2",
        "followees": 577,
        "description": "Peoples champion. #CMU Instagram @b_brewer2",
        "followers": 724,
        "location": "Mount Pleasant / Dirty Mitten",
        "mean-per-score": 0.4874386,
        "more-person": 1,
        "notFound": true,
        "created_at": 1315691952000,
        "profile_image_url": "http://pbs.twimg.com/profile_images/669622972974571520/JZ4-ZJtc_normal.jpg",
        "posts_per_day": 3.2210307946401304,
        "occupation_count": 1,
        "official_count": 0,
        "mean-org-score": 0.12279078,
        "sum-org-score": 2.0874434,
        "tweet_count": 5020,
        "correct": "person",
        "url": null,
        "sum-per-score": 8.286456,
        "lang": "en",
        "mean-loc-score": 0.0,
        "kind": "UserID",
        "preposition_place_count": 0,
        "string": "@B_brewer2",
        "sum-loc-score": 0.0,
        "verified": false,
        "name": "B",
        "max-per-score": 0.23887041
      }
    ],
    "Mentions:Lookup": [
      {
        "indices": [78, 79],
        "annotationID": 7707,
        "majorType": "First_Singular"
      }, {
        "indices": [109, 111],
        "annotationID": 7708,
        "majorType": "First_Plural"
      }, {
        "indices": [139, 147],
        "annotationID": 7709,
        "majorType": "occupation"
      }, {
        "indices": [175, 189],
        "annotationID": 7710,
        "majorType": "location",
        "minorType": "city"
      }
    ],
    "Mentions:Token": [
      {
        "indices": [139, 147],
        "annotationID": 7711,
        "string": "champion",
        "length": "8",
        "orth": "lowercase",
        "kind": "word",
        "category": "NN",
        "org-sim": -0.0,
        "per-sim": 0.7443621442870574,
        "loc-sim": 0.23887041511105644
      }, {
        "indices": [147, 148],
        "annotationID": 7712,
        "string": ".",
        "length": "1",
        "kind": "punctuation",
        "category": ".",
        "org-sim": 0,
        "per-sim": 0,
        "loc-sim": 0
      }, {
        "indices": [154, 163],
        "annotationID": 7713,
        "string": "Instagram",
        "length": "9",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NNP",
        "org-sim": 0,
        "per-sim": 0,
        "loc-sim": 0
      }, {
        "indices": [175, 180],
        "annotationID": 7714,
        "string": "Mount",
        "length": "5",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NNP",
        "org-sim": 0.22064662513322142,
        "per-sim": 0.8544417447098271,
        "loc-sim": 0.35473442086545404
      }, {
        "indices": [181, 189],
        "annotationID": 7715,
        "string": "Pleasant",
        "length": "8",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NNP",
        "org-sim": 0.0,
        "per-sim": 0.0,
        "loc-sim": 0.0
      }, {
        "indices": [190, 191],
        "annotationID": 7716,
        "string": "/",
        "length": "1",
        "kind": "punctuation",
        "category": "CC",
        "org-sim": 0,
        "per-sim": 0,
        "loc-sim": 0
      }, {
        "indices": [192, 197],
        "annotationID": 7717,
        "string": "Dirty",
        "length": "5",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NNP",
        "org-sim": 0.0,
        "per-sim": 0.0,
        "loc-sim": 0.0
      }, {
        "indices": [198, 204],
        "annotationID": 7719,
        "string": "Mitten",
        "length": "6",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NNP",
        "org-sim": -0.0,
        "per-sim": 0.8602843454589831,
        "loc-sim": 0.14924995185671222
      }, {
        "indices": [123, 130],
        "annotationID": 7720,
        "origString": "brewer2",
        "rule": "Recombine",
        "kind": "word",
        "length": 7,
        "string": "brewers",
        "orth": "mixed",
        "replaced": 2,
        "category": "NNS",
        "org-sim": -0.0,
        "per-sim": 0.4837099947797898,
        "loc-sim": 0.1747547657141122
      }, {
        "indices": [164, 174],
        "annotationID": 7721,
        "rule": "UserID",
        "category": "USR",
        "kind": "word",
        "length": 10,
        "string": "b_brewer2",
        "org-sim": 0.2684069630244764,
        "per-sim": 1.0969684202555057,
        "loc-sim": 0.20712321756479615
      }, {
        "indices": [149, 150],
        "annotationID": 7722,
        "string": "#",
        "length": "1",
        "kind": "punctuation",
        "category": "HT",
        "org-sim": 0,
        "per-sim": 0,
        "loc-sim": 0
      }, {
        "indices": [150, 152],
        "annotationID": 7723,
        "string": "CM",
        "length": "2",
        "kind": "word",
        "orth": "allCaps",
        "origString": "CM",
        "category": "NNP",
        "org-sim": 0.21253024110815663,
        "per-sim": 0.2372382603579653,
        "loc-sim": 0.1139366677744672
      }, {
        "indices": [152, 153],
        "annotationID": 7724,
        "string": "U",
        "length": "1",
        "kind": "word",
        "orth": "allCaps",
        "origString": "U",
        "category": "NNP",
        "org-sim": 0.30884802775026887,
        "per-sim": 0.363927858878418,
        "loc-sim": 0.1244179026847359
      }, {
        "indices": [115, 120],
        "annotationID": 7725,
        "string": "callB",
        "length": "5",
        "orth": "mixedCaps",
        "kind": "word",
        "origString": "callB",
        "category": "NN",
        "org-sim": 0,
        "per-sim": 0,
        "loc-sim": 0
      }, {
        "indices": [121, 122],
        "annotationID": 7726,
        "string": "B",
        "length": "1",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NN",
        "org-sim": 0.2684069630244764,
        "per-sim": 1.0969684202555057,
        "loc-sim": 0.20712321756479615
      }, {
        "indices": [122, 123],
        "annotationID": 7727,
        "string": "_",
        "length": "1",
        "kind": "punctuation",
        "category": "UH",
        "org-sim": 0,
        "per-sim": 0,
        "loc-sim": 0
      }, {
        "indices": [131, 138],
        "annotationID": 7728,
        "string": "Peoples",
        "length": "7",
        "orth": "upperInitial",
        "kind": "word",
        "category": "NNS",
        "org-sim": 0.8086046876737905,
        "per-sim": 0.9171646205032922,
        "loc-sim": 0.06117905021185258
      }
    ],
    "Mentions:Location": [
      {
        "indices": [175, 189],
        "annotationID": 7718,
        "locType": "city",
        "rule": "Location1",
        "ruleFinal": "LocFinal"
      }
    ],
    "Mentions:OOV_word": [
      {
        "indices": [154, 163],
        "annotationID": 7729,
        "string": "Instagram"
      }, {
        "indices": [150, 152],
        "annotationID": 7730,
        "string": "CM"
      }
    ],
    "Mentions:OOV_span": [
      {
        "indices": [131, 174],
        "annotationID": 7731,
        "ratio": 0.4,
        "total": 5,
        "out_of_vocabulary": 2
      }
    ],
    "Mentions:screen_name_edit": [
      {
        "indices": [119, 130],
        "annotationID": 7733,
        "distance": 0
      }
    ],
    "Key:Tweet": [
      {
        "indices": [0, 207],
        "annotationID": 0,
        "id_str": 623643245826981888,
        "user:name": "Mason",
        "truncated": false,
        "source": "<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android</a>",
        "user:location": "✋",
        "user:screen_name": "_TimMason"
      }
    ],
    "Key:UserID": [
      {
        "indices": [1, 10],
        "annotationID": 1,
        "location": "Mount Pleasant / Dirty Mitten",
        "description": "Peoples champion. #CMU Instagram @b_brewer2",
        "verified": false,
        "name": "B",
        "string": "@B_brewer2",
        "created_at": 1315691952000,
        "tweet_count": 4905,
        "user": "B_brewer2",
        "lang": "en",
        "kind": "UserID"
      }
    ]
  }
};

createTree = require("functional-red-black-tree");

entities = doc.entities;

AnnotationDisplay = (function() {

  /*
    Encapsulates the generation of the required DOM objects to show overlapping annotations
   */
  function AnnotationDisplay(text1, annotationSets, target) {
    var i, j, ref, ref1, results, results1;
    this.text = text1;
    this.annotationSets = annotationSets;
    this.target = target;
    this.colourField = (function() {
      results = [];
      for (var i = 0, ref = this.text.length; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this).map(function() {
      return [255, 255, 255, 1];
    });
    this.annotationsAt = (function() {
      results1 = [];
      for (var j = 0, ref1 = this.text.length; 0 <= ref1 ? j <= ref1 : j >= ref1; 0 <= ref1 ? j++ : j--){ results1.push(j); }
      return results1;
    }).apply(this).map(function() {
      return {};
    });
    this.typeColours = {};
    this.updateColourField();
    this.spans = this.getSpansInRange();
    this.spans = this.renderSpans(this.spans, this.text);
    this.update();
  }

  AnnotationDisplay.prototype.getTypeColour = function(type) {

    /* 
      Generates a colour for the given type, or retrieves it if there already is one.
     */
    var colour;
    if (indexOf.call(this.typeColours, type) >= 0) {
      return type;
    } else {
      colour = [(Math.random() * 75) + 180, (Math.random() * 75) + 180, (Math.random() * 75) + 180, 0.5];
      this.typeColours[type] = colour;
      return colour;
    }
  };

  AnnotationDisplay.prototype.combineAlpha = function(a, b) {

    /* Combines two colours, appying alpha channel */
    var alpha, c, i, len, out, ref;
    out = [0, 0, 0, 0];
    alpha = a[3] + b[3] * (1 - a[3]);
    out[3] = alpha;
    ref = [0, 1, 2];
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      out[c] = Math.floor((a[c] * a[3] + b[c] * b[3] * (1 - a[3])) / alpha);
    }
    return out;
  };

  AnnotationDisplay.prototype.updateColourField = function(start, end) {
    var annotation, annotations, i, index, j, offset, ref, ref1, ref2, results, results1, results2, type, typeColour;
    if (start == null) {
      start = null;
    }
    if (end == null) {
      end = null;
    }
    this.colourField = (function() {
      results = [];
      for (var i = 0, ref = this.text.length; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this).map(function() {
      return [255, 255, 255, 1];
    });
    this.annotationsAt = (function() {
      results1 = [];
      for (var j = 0, ref1 = this.text.length; 0 <= ref1 ? j <= ref1 : j >= ref1; 0 <= ref1 ? j++ : j--){ results1.push(j); }
      return results1;
    }).apply(this).map(function() {
      return {};
    });

    /* Calculates the colours at each offset in the document */
    ref2 = this.annotationSets;
    results2 = [];
    for (type in ref2) {
      annotations = ref2[type];
      typeColour = this.getTypeColour(type);
      results2.push((function() {
        var results3;
        results3 = [];
        for (index in annotations) {
          annotation = annotations[index];
          annotation.type = type;
          results3.push((function() {
            var k, ref3, ref4, results4;
            results4 = [];
            for (offset = k = ref3 = annotation.indices[0], ref4 = annotation.indices[1]; ref3 <= ref4 ? k <= ref4 : k >= ref4; offset = ref3 <= ref4 ? ++k : --k) {
              this.colourField[offset] = this.combineAlpha(typeColour, this.colourField[offset]);
              results4.push(this.annotationsAt[offset][annotation.annotationID] = annotation);
            }
            return results4;
          }).call(this));
        }
        return results3;
      }).call(this));
    }
    return results2;
  };

  AnnotationDisplay.prototype.getSpansInRange = function(start, end) {
    var colour, i, lastColour, lastOffset, offset, ref, ref1, spans;
    if (start == null) {
      start = null;
    }
    if (end == null) {
      end = null;
    }

    /* Returns the ranges for each colour area */
    lastColour = null;
    lastOffset = -1;
    start = start === null ? 0 : start;
    end = end === null ? this.colourField.length - 1 : end;
    spans = [];
    for (offset = i = ref = start, ref1 = end; ref <= ref1 ? i <= ref1 : i >= ref1; offset = ref <= ref1 ? ++i : --i) {
      colour = this.colourField[offset];
      if (!Object.equal(lastColour, colour)) {
        spans.push({
          start: lastOffset,
          end: offset - 1,
          colour: lastColour,
          annotations: this.annotationsAt[offset - 1]
        });
        lastColour = colour;
        lastOffset = offset;
      }
    }
    spans.push({
      start: lastOffset,
      end: end,
      colour: lastColour,
      annotations: this.annotationsAt[end - 1]
    });
    return spans;
  };

  AnnotationDisplay.prototype.renderSpans = function(spans) {

    /* Converts the specified spans to nodes in the document
    
    Returns a copy of the spans with the nodes attached as a field
     */
    var colour, i, len, result, span, spanNode, text, textNode;
    result = [];
    for (i = 0, len = spans.length; i < len; i++) {
      span = spans[i];
      text = this.text.slice(span.start, +span.end + 1 || 9e9);
      textNode = document.createTextNode(text);
      spanNode = document.createElement("span");
      colour = span.colour;
      if (colour !== null) {
        spanNode.style["background-color"] = "rgba(" + colour[0] + ", " + colour[1] + ", " + colour[2] + ", " + colour[3] + ")";
      }
      span = $.extend({}, span, {
        node: spanNode
      });
      this.attachEvents(span);
      result.append(span);
    }
    return result;
  };

  AnnotationDisplay.prototype.attachEvents = function(span) {
    $(span.node).on("mouseover", null, span, (function(_this) {
      return function(event) {
        return _this.showSpan(event.data);
      };
    })(this));
    return $(span.node).on("click", null, span, (function(_this) {
      return function(event) {
        return _this.deleteSpan(event.data);
      };
    })(this));
  };

  AnnotationDisplay.prototype.showSpan = function(span) {
    var annotation, annotationId, ref, text;
    text = "";
    ref = span.annotations;
    for (annotationId in ref) {
      annotation = ref[annotationId];
      text += annotation.type + "<br />";
    }
    return $("#annotationInfo").html(text);
  };

  AnnotationDisplay.prototype.deleteSpan = function(span) {
    var annotation, annotationId, ref, results;
    ref = span.annotations;
    results = [];
    for (annotationId in ref) {
      annotation = ref[annotationId];
      this.removeAnnotation(annotation);
      break;
    }
    return results;
  };

  AnnotationDisplay.prototype.update = function() {
    var result, span;
    result = document.createElement("div");
    $(result).append((function() {
      var i, len, ref, results;
      ref = this.spans;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        span = ref[i];
        results.push(span.node);
      }
      return results;
    }).call(this));
    return this.target.replaceWith(result);
  };

  AnnotationDisplay.prototype.removeAnnotation = function(annotation) {
    var annotationId, colour, first, i, len, old, ref, ref1, result, span, spanNode, text, textNode;
    this.annotationSets[annotation.type] = this.annotationSets[annotation.type].filter(function(ann) {
      return ann !== annotation;
    });
    this.updateColourField(annotation.indices[0], annotation.indices[1]);
    old = annotation.documentNodes;
    console.log(old);
    annotation.documentNodes = [];
    result = [];
    console.log(this.getColourRanges(annotation.indices[0], annotation.indices[1]));
    ref = this.getColourRanges(annotation.indices[0], annotation.indices[1]);
    for (i = 0, len = ref.length; i < len; i++) {
      span = ref[i];
      text = this.text.slice(span.start, +span.end + 1 || 9e9);
      textNode = document.createTextNode(text);
      spanNode = document.createElement("span");
      colour = span.colour;
      if (colour !== null) {
        spanNode.style["background-color"] = "rgba(" + colour[0] + ", " + colour[1] + ", " + colour[2] + ", " + colour[3] + ")";
      }
      spanNode.appendChild(textNode);
      result.push(spanNode);
      $(spanNode).on("mouseover", null, span, (function(_this) {
        return function(event) {
          var annotationId, ref1;
          text = "";
          ref1 = event.data.annotations;
          for (annotationId in ref1) {
            annotation = ref1[annotationId];
            text += annotation.type + "<br />";
          }
          return $("#annotationInfo").html(text);
        };
      })(this));
      $(spanNode).on("click", null, span, (function(_this) {
        return function(event) {
          var annotationId, ref1, results;
          ref1 = event.data.annotations;
          results = [];
          for (annotationId in ref1) {
            annotation = ref1[annotationId];
            _this.removeAnnotation(annotation);
            break;
          }
          return results;
        };
      })(this));
      ref1 = span.annotations;
      for (annotationId in ref1) {
        annotation = ref1[annotationId];
        annotation.documentNodes = annotation.documentNodes.filter(function(node) {
          return indexOf.call(old, node) < 0;
        });
        if ("documentNodes" in annotation) {
          annotation.documentNodes.push(spanNode);
        } else {
          annotation.documentNodes = [spanNode];
        }
      }
    }
    first = $(old).first();
    console.log(result);
    first.before(result);
    return $(old).remove();
  };

  return AnnotationDisplay;

})();

$().ready(function() {
  var display;
  display = new AnnotationDisplay(doc.text, doc.entities);
  return display.update($("#docView"));
});



},{"functional-red-black-tree":2}],2:[function(require,module,exports){
"use strict"

module.exports = createRBTree

var RED   = 0
var BLACK = 1

function RBNode(color, key, value, left, right, count) {
  this._color = color
  this.key = key
  this.value = value
  this.left = left
  this.right = right
  this._count = count
}

function cloneNode(node) {
  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)
}

function repaint(color, node) {
  return new RBNode(color, node.key, node.value, node.left, node.right, node._count)
}

function recount(node) {
  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)
}

function RedBlackTree(compare, root) {
  this._compare = compare
  this.root = root
}

var proto = RedBlackTree.prototype

Object.defineProperty(proto, "keys", {
  get: function() {
    var result = []
    this.forEach(function(k,v) {
      result.push(k)
    })
    return result
  }
})

Object.defineProperty(proto, "values", {
  get: function() {
    var result = []
    this.forEach(function(k,v) {
      result.push(v)
    })
    return result
  }
})

//Returns the number of nodes in the tree
Object.defineProperty(proto, "length", {
  get: function() {
    if(this.root) {
      return this.root._count
    }
    return 0
  }
})

//Insert a new item into the tree
proto.insert = function(key, value) {
  var cmp = this._compare
  //Find point to insert new node at
  var n = this.root
  var n_stack = []
  var d_stack = []
  while(n) {
    var d = cmp(key, n.key)
    n_stack.push(n)
    d_stack.push(d)
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  //Rebuild path to leaf node
  n_stack.push(new RBNode(RED, key, value, null, null, 1))
  for(var s=n_stack.length-2; s>=0; --s) {
    var n = n_stack[s]
    if(d_stack[s] <= 0) {
      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s+1], n.right, n._count+1)
    } else {
      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s+1], n._count+1)
    }
  }
  //Rebalance tree using rotations
  //console.log("start insert", key, d_stack)
  for(var s=n_stack.length-1; s>1; --s) {
    var p = n_stack[s-1]
    var n = n_stack[s]
    if(p._color === BLACK || n._color === BLACK) {
      break
    }
    var pp = n_stack[s-2]
    if(pp.left === p) {
      if(p.left === n) {
        var y = pp.right
        if(y && y._color === RED) {
          //console.log("LLr")
          p._color = BLACK
          pp.right = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("LLb")
          pp._color = RED
          pp.left = p.right
          p._color = BLACK
          p.right = pp
          n_stack[s-2] = p
          n_stack[s-1] = n
          recount(pp)
          recount(p)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.left === pp) {
              ppp.left = p
            } else {
              ppp.right = p
            }
          }
          break
        }
      } else {
        var y = pp.right
        if(y && y._color === RED) {
          //console.log("LRr")
          p._color = BLACK
          pp.right = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("LRb")
          p.right = n.left
          pp._color = RED
          pp.left = n.right
          n._color = BLACK
          n.left = p
          n.right = pp
          n_stack[s-2] = n
          n_stack[s-1] = p
          recount(pp)
          recount(p)
          recount(n)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.left === pp) {
              ppp.left = n
            } else {
              ppp.right = n
            }
          }
          break
        }
      }
    } else {
      if(p.right === n) {
        var y = pp.left
        if(y && y._color === RED) {
          //console.log("RRr", y.key)
          p._color = BLACK
          pp.left = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("RRb")
          pp._color = RED
          pp.right = p.left
          p._color = BLACK
          p.left = pp
          n_stack[s-2] = p
          n_stack[s-1] = n
          recount(pp)
          recount(p)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.right === pp) {
              ppp.right = p
            } else {
              ppp.left = p
            }
          }
          break
        }
      } else {
        var y = pp.left
        if(y && y._color === RED) {
          //console.log("RLr")
          p._color = BLACK
          pp.left = repaint(BLACK, y)
          pp._color = RED
          s -= 1
        } else {
          //console.log("RLb")
          p.left = n.right
          pp._color = RED
          pp.right = n.left
          n._color = BLACK
          n.right = p
          n.left = pp
          n_stack[s-2] = n
          n_stack[s-1] = p
          recount(pp)
          recount(p)
          recount(n)
          if(s >= 3) {
            var ppp = n_stack[s-3]
            if(ppp.right === pp) {
              ppp.right = n
            } else {
              ppp.left = n
            }
          }
          break
        }
      }
    }
  }
  //Return new tree
  n_stack[0]._color = BLACK
  return new RedBlackTree(cmp, n_stack[0])
}


//Visit all nodes inorder
function doVisitFull(visit, node) {
  if(node.left) {
    var v = doVisitFull(visit, node.left)
    if(v) { return v }
  }
  var v = visit(node.key, node.value)
  if(v) { return v }
  if(node.right) {
    return doVisitFull(visit, node.right)
  }
}

//Visit half nodes in order
function doVisitHalf(lo, compare, visit, node) {
  var l = compare(lo, node.key)
  if(l <= 0) {
    if(node.left) {
      var v = doVisitHalf(lo, compare, visit, node.left)
      if(v) { return v }
    }
    var v = visit(node.key, node.value)
    if(v) { return v }
  }
  if(node.right) {
    return doVisitHalf(lo, compare, visit, node.right)
  }
}

//Visit all nodes within a range
function doVisit(lo, hi, compare, visit, node) {
  var l = compare(lo, node.key)
  var h = compare(hi, node.key)
  var v
  if(l <= 0) {
    if(node.left) {
      v = doVisit(lo, hi, compare, visit, node.left)
      if(v) { return v }
    }
    if(h > 0) {
      v = visit(node.key, node.value)
      if(v) { return v }
    }
  }
  if(h > 0 && node.right) {
    return doVisit(lo, hi, compare, visit, node.right)
  }
}


proto.forEach = function rbTreeForEach(visit, lo, hi) {
  if(!this.root) {
    return
  }
  switch(arguments.length) {
    case 1:
      return doVisitFull(visit, this.root)
    break

    case 2:
      return doVisitHalf(lo, this._compare, visit, this.root)
    break

    case 3:
      if(this._compare(lo, hi) >= 0) {
        return
      }
      return doVisit(lo, hi, this._compare, visit, this.root)
    break
  }
}

//First item in list
Object.defineProperty(proto, "begin", {
  get: function() {
    var stack = []
    var n = this.root
    while(n) {
      stack.push(n)
      n = n.left
    }
    return new RedBlackTreeIterator(this, stack)
  }
})

//Last item in list
Object.defineProperty(proto, "end", {
  get: function() {
    var stack = []
    var n = this.root
    while(n) {
      stack.push(n)
      n = n.right
    }
    return new RedBlackTreeIterator(this, stack)
  }
})

//Find the ith item in the tree
proto.at = function(idx) {
  if(idx < 0) {
    return new RedBlackTreeIterator(this, [])
  }
  var n = this.root
  var stack = []
  while(true) {
    stack.push(n)
    if(n.left) {
      if(idx < n.left._count) {
        n = n.left
        continue
      }
      idx -= n.left._count
    }
    if(!idx) {
      return new RedBlackTreeIterator(this, stack)
    }
    idx -= 1
    if(n.right) {
      if(idx >= n.right._count) {
        break
      }
      n = n.right
    } else {
      break
    }
  }
  return new RedBlackTreeIterator(this, [])
}

proto.ge = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d <= 0) {
      last_ptr = stack.length
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

proto.gt = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d < 0) {
      last_ptr = stack.length
    }
    if(d < 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

proto.lt = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d > 0) {
      last_ptr = stack.length
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

proto.le = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  var last_ptr = 0
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d >= 0) {
      last_ptr = stack.length
    }
    if(d < 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  stack.length = last_ptr
  return new RedBlackTreeIterator(this, stack)
}

//Finds the item with key if it exists
proto.find = function(key) {
  var cmp = this._compare
  var n = this.root
  var stack = []
  while(n) {
    var d = cmp(key, n.key)
    stack.push(n)
    if(d === 0) {
      return new RedBlackTreeIterator(this, stack)
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  return new RedBlackTreeIterator(this, [])
}

//Removes item with key from tree
proto.remove = function(key) {
  var iter = this.find(key)
  if(iter) {
    return iter.remove()
  }
  return this
}

//Returns the item at `key`
proto.get = function(key) {
  var cmp = this._compare
  var n = this.root
  while(n) {
    var d = cmp(key, n.key)
    if(d === 0) {
      return n.value
    }
    if(d <= 0) {
      n = n.left
    } else {
      n = n.right
    }
  }
  return
}

//Iterator for red black tree
function RedBlackTreeIterator(tree, stack) {
  this.tree = tree
  this._stack = stack
}

var iproto = RedBlackTreeIterator.prototype

//Test if iterator is valid
Object.defineProperty(iproto, "valid", {
  get: function() {
    return this._stack.length > 0
  }
})

//Node of the iterator
Object.defineProperty(iproto, "node", {
  get: function() {
    if(this._stack.length > 0) {
      return this._stack[this._stack.length-1]
    }
    return null
  },
  enumerable: true
})

//Makes a copy of an iterator
iproto.clone = function() {
  return new RedBlackTreeIterator(this.tree, this._stack.slice())
}

//Swaps two nodes
function swapNode(n, v) {
  n.key = v.key
  n.value = v.value
  n.left = v.left
  n.right = v.right
  n._color = v._color
  n._count = v._count
}

//Fix up a double black node in a tree
function fixDoubleBlack(stack) {
  var n, p, s, z
  for(var i=stack.length-1; i>=0; --i) {
    n = stack[i]
    if(i === 0) {
      n._color = BLACK
      return
    }
    //console.log("visit node:", n.key, i, stack[i].key, stack[i-1].key)
    p = stack[i-1]
    if(p.left === n) {
      //console.log("left child")
      s = p.right
      if(s.right && s.right._color === RED) {
        //console.log("case 1: right sibling child red")
        s = p.right = cloneNode(s)
        z = s.right = cloneNode(s.right)
        p.right = s.left
        s.left = p
        s.right = z
        s._color = p._color
        n._color = BLACK
        p._color = BLACK
        z._color = BLACK
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.left === p) {
            pp.left = s
          } else {
            pp.right = s
          }
        }
        stack[i-1] = s
        return
      } else if(s.left && s.left._color === RED) {
        //console.log("case 1: left sibling child red")
        s = p.right = cloneNode(s)
        z = s.left = cloneNode(s.left)
        p.right = z.left
        s.left = z.right
        z.left = p
        z.right = s
        z._color = p._color
        p._color = BLACK
        s._color = BLACK
        n._color = BLACK
        recount(p)
        recount(s)
        recount(z)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.left === p) {
            pp.left = z
          } else {
            pp.right = z
          }
        }
        stack[i-1] = z
        return
      }
      if(s._color === BLACK) {
        if(p._color === RED) {
          //console.log("case 2: black sibling, red parent", p.right.value)
          p._color = BLACK
          p.right = repaint(RED, s)
          return
        } else {
          //console.log("case 2: black sibling, black parent", p.right.value)
          p.right = repaint(RED, s)
          continue  
        }
      } else {
        //console.log("case 3: red sibling")
        s = cloneNode(s)
        p.right = s.left
        s.left = p
        s._color = p._color
        p._color = RED
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.left === p) {
            pp.left = s
          } else {
            pp.right = s
          }
        }
        stack[i-1] = s
        stack[i] = p
        if(i+1 < stack.length) {
          stack[i+1] = n
        } else {
          stack.push(n)
        }
        i = i+2
      }
    } else {
      //console.log("right child")
      s = p.left
      if(s.left && s.left._color === RED) {
        //console.log("case 1: left sibling child red", p.value, p._color)
        s = p.left = cloneNode(s)
        z = s.left = cloneNode(s.left)
        p.left = s.right
        s.right = p
        s.left = z
        s._color = p._color
        n._color = BLACK
        p._color = BLACK
        z._color = BLACK
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.right === p) {
            pp.right = s
          } else {
            pp.left = s
          }
        }
        stack[i-1] = s
        return
      } else if(s.right && s.right._color === RED) {
        //console.log("case 1: right sibling child red")
        s = p.left = cloneNode(s)
        z = s.right = cloneNode(s.right)
        p.left = z.right
        s.right = z.left
        z.right = p
        z.left = s
        z._color = p._color
        p._color = BLACK
        s._color = BLACK
        n._color = BLACK
        recount(p)
        recount(s)
        recount(z)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.right === p) {
            pp.right = z
          } else {
            pp.left = z
          }
        }
        stack[i-1] = z
        return
      }
      if(s._color === BLACK) {
        if(p._color === RED) {
          //console.log("case 2: black sibling, red parent")
          p._color = BLACK
          p.left = repaint(RED, s)
          return
        } else {
          //console.log("case 2: black sibling, black parent")
          p.left = repaint(RED, s)
          continue  
        }
      } else {
        //console.log("case 3: red sibling")
        s = cloneNode(s)
        p.left = s.right
        s.right = p
        s._color = p._color
        p._color = RED
        recount(p)
        recount(s)
        if(i > 1) {
          var pp = stack[i-2]
          if(pp.right === p) {
            pp.right = s
          } else {
            pp.left = s
          }
        }
        stack[i-1] = s
        stack[i] = p
        if(i+1 < stack.length) {
          stack[i+1] = n
        } else {
          stack.push(n)
        }
        i = i+2
      }
    }
  }
}

//Removes item at iterator from tree
iproto.remove = function() {
  var stack = this._stack
  if(stack.length === 0) {
    return this.tree
  }
  //First copy path to node
  var cstack = new Array(stack.length)
  var n = stack[stack.length-1]
  cstack[cstack.length-1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)
  for(var i=stack.length-2; i>=0; --i) {
    var n = stack[i]
    if(n.left === stack[i+1]) {
      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)
    } else {
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)
    }
  }

  //Get node
  n = cstack[cstack.length-1]
  //console.log("start remove: ", n.value)

  //If not leaf, then swap with previous node
  if(n.left && n.right) {
    //console.log("moving to leaf")

    //First walk to previous leaf
    var split = cstack.length
    n = n.left
    while(n.right) {
      cstack.push(n)
      n = n.right
    }
    //Copy path to leaf
    var v = cstack[split-1]
    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))
    cstack[split-1].key = n.key
    cstack[split-1].value = n.value

    //Fix up stack
    for(var i=cstack.length-2; i>=split; --i) {
      n = cstack[i]
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)
    }
    cstack[split-1].left = cstack[split]
  }
  //console.log("stack=", cstack.map(function(v) { return v.value }))

  //Remove leaf node
  n = cstack[cstack.length-1]
  if(n._color === RED) {
    //Easy case: removing red leaf
    //console.log("RED leaf")
    var p = cstack[cstack.length-2]
    if(p.left === n) {
      p.left = null
    } else if(p.right === n) {
      p.right = null
    }
    cstack.pop()
    for(var i=0; i<cstack.length; ++i) {
      cstack[i]._count--
    }
    return new RedBlackTree(this.tree._compare, cstack[0])
  } else {
    if(n.left || n.right) {
      //Second easy case:  Single child black parent
      //console.log("BLACK single child")
      if(n.left) {
        swapNode(n, n.left)
      } else if(n.right) {
        swapNode(n, n.right)
      }
      //Child must be red, so repaint it black to balance color
      n._color = BLACK
      for(var i=0; i<cstack.length-1; ++i) {
        cstack[i]._count--
      }
      return new RedBlackTree(this.tree._compare, cstack[0])
    } else if(cstack.length === 1) {
      //Third easy case: root
      //console.log("ROOT")
      return new RedBlackTree(this.tree._compare, null)
    } else {
      //Hard case: Repaint n, and then do some nasty stuff
      //console.log("BLACK leaf no children")
      for(var i=0; i<cstack.length; ++i) {
        cstack[i]._count--
      }
      var parent = cstack[cstack.length-2]
      fixDoubleBlack(cstack)
      //Fix up links
      if(parent.left === n) {
        parent.left = null
      } else {
        parent.right = null
      }
    }
  }
  return new RedBlackTree(this.tree._compare, cstack[0])
}

//Returns key
Object.defineProperty(iproto, "key", {
  get: function() {
    if(this._stack.length > 0) {
      return this._stack[this._stack.length-1].key
    }
    return
  },
  enumerable: true
})

//Returns value
Object.defineProperty(iproto, "value", {
  get: function() {
    if(this._stack.length > 0) {
      return this._stack[this._stack.length-1].value
    }
    return
  },
  enumerable: true
})


//Returns the position of this iterator in the sorted list
Object.defineProperty(iproto, "index", {
  get: function() {
    var idx = 0
    var stack = this._stack
    if(stack.length === 0) {
      var r = this.tree.root
      if(r) {
        return r._count
      }
      return 0
    } else if(stack[stack.length-1].left) {
      idx = stack[stack.length-1].left._count
    }
    for(var s=stack.length-2; s>=0; --s) {
      if(stack[s+1] === stack[s].right) {
        ++idx
        if(stack[s].left) {
          idx += stack[s].left._count
        }
      }
    }
    return idx
  },
  enumerable: true
})

//Advances iterator to next element in list
iproto.next = function() {
  var stack = this._stack
  if(stack.length === 0) {
    return
  }
  var n = stack[stack.length-1]
  if(n.right) {
    n = n.right
    while(n) {
      stack.push(n)
      n = n.left
    }
  } else {
    stack.pop()
    while(stack.length > 0 && stack[stack.length-1].right === n) {
      n = stack[stack.length-1]
      stack.pop()
    }
  }
}

//Checks if iterator is at end of tree
Object.defineProperty(iproto, "hasNext", {
  get: function() {
    var stack = this._stack
    if(stack.length === 0) {
      return false
    }
    if(stack[stack.length-1].right) {
      return true
    }
    for(var s=stack.length-1; s>0; --s) {
      if(stack[s-1].left === stack[s]) {
        return true
      }
    }
    return false
  }
})

//Update value
iproto.update = function(value) {
  var stack = this._stack
  if(stack.length === 0) {
    throw new Error("Can't update empty node!")
  }
  var cstack = new Array(stack.length)
  var n = stack[stack.length-1]
  cstack[cstack.length-1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)
  for(var i=stack.length-2; i>=0; --i) {
    n = stack[i]
    if(n.left === stack[i+1]) {
      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)
    } else {
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)
    }
  }
  return new RedBlackTree(this.tree._compare, cstack[0])
}

//Moves iterator backward one element
iproto.prev = function() {
  var stack = this._stack
  if(stack.length === 0) {
    return
  }
  var n = stack[stack.length-1]
  if(n.left) {
    n = n.left
    while(n) {
      stack.push(n)
      n = n.right
    }
  } else {
    stack.pop()
    while(stack.length > 0 && stack[stack.length-1].left === n) {
      n = stack[stack.length-1]
      stack.pop()
    }
  }
}

//Checks if iterator is at start of tree
Object.defineProperty(iproto, "hasPrev", {
  get: function() {
    var stack = this._stack
    if(stack.length === 0) {
      return false
    }
    if(stack[stack.length-1].left) {
      return true
    }
    for(var s=stack.length-1; s>0; --s) {
      if(stack[s-1].right === stack[s]) {
        return true
      }
    }
    return false
  }
})

//Default comparison function
function defaultCompare(a, b) {
  if(a < b) {
    return -1
  }
  if(a > b) {
    return 1
  }
  return 0
}

//Build a tree
function createRBTree(compare) {
  return new RedBlackTree(compare || defaultCompare, null)
}
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

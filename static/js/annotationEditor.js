// Generated by CoffeeScript 1.11.1
var AnnotationEditor,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

AnnotationEditor = (function() {
  function AnnotationEditor(target) {
    this.target = target;
    this.showAnnotation = bind(this.showAnnotation, this);
    this.viewer = null;
    this.target.find(".nudgeLeft").on("click", (function(_this) {
      return function() {
        return _this.nudgeAnnotation(-1);
      };
    })(this));
    this.target.find(".nudgeRight").on("click", (function(_this) {
      return function() {
        return _this.nudgeAnnotation(1);
      };
    })(this));
    this.target.find(".nudgeLeftEdge").on("click", (function(_this) {
      return function() {
        return _this.nudgeAnnotationEdge(-1);
      };
    })(this));
    this.target.find(".nudgeRightEdge").on("click", (function(_this) {
      return function() {
        return _this.nudgeAnnotationEdge(1);
      };
    })(this));
    this.target.find(".createAnnotation").on("click", (function(_this) {
      return function() {
        return _this.addAnnotation(1);
      };
    })(this));
    this.target.find(".deleteAnnotation").on("click", (function(_this) {
      return function() {
        return _this.viewer.annotationDisplay.removeAnnotation(_this.annotation);
      };
    })(this));
  }

  AnnotationEditor.prototype.showAnnotation = function(annotation) {
    var feature, ref, results, value;
    this.annotation = annotation;
    console.log("Showing annotation", this.annotation);
    this.target.find(".annotationType").val(this.annotation.type);
    this.target.find(".featureValues").empty();
    ref = this.annotation;
    results = [];
    for (feature in ref) {
      value = ref[feature];
      results.push(this.target.find(".featureValues").append($.parseHTML("<tr><td>" + feature + "</td><td>" + value + "</td></tr>")));
    }
    return results;
  };

  AnnotationEditor.prototype.nudgeAnnotation = function(amount) {
    var oldLeft, oldRight;
    oldLeft = this.annotation.indices[0];
    oldRight = this.annotation.indices[1];
    this.annotation.indices[0] += amount;
    this.annotation.indices[1] += amount;
    this.viewer.annotationDisplay.invalidate(Math.min(this.annotation.indices[0], oldLeft), Math.max(this.annotation.indices[1], oldRight));
    return this.showAnnotation(this.annotation, this.display);
  };

  AnnotationEditor.prototype.nudgeAnnotationEdge = function(amount) {
    var oldLeft, oldRight;
    oldLeft = this.annotation.indices[0];
    oldRight = this.annotation.indices[1];
    if (amount < 0) {
      this.annotation.indices[0] += amount;
    } else {
      this.annotation.indices[1] += amount;
    }
    this.viewer.annotationDisplay.invalidate(Math.min(this.annotation.indices[0], oldLeft), Math.max(this.annotation.indices[1], oldRight));
    return this.showAnnotation(this.annotation, this.display);
  };

  AnnotationEditor.prototype.addAnnotation = function() {
    var name, offsets, range, sel;
    name = this.target.find(".annotationType").val();
    sel = rangy.getSelection();
    if (sel.rangeCount > 0) {
      range = rangy.getSelection().getRangeAt(0);
      offsets = range.toCharacterRange(this.viewer.annotationDisplay.target.get(0));
      if (offsets.start !== offsets.end) {
        return this.viewer.addAnnotation(name, offsets.start, offsets.end);
      }
    }
  };

  return AnnotationEditor;

})();

//# sourceMappingURL=annotationEditor.js.map
